name: CI/CD → ECS (CodeDeploy Canary)

on:
  pull_request:
    branches:
      - master
    types: [closed]

env:
  AWS_REGION: sa-east-1
  SERVICE_NAME: jwt-validator
  APPLICATION_NAME: jwt-validator-codedeploy-app
  DEPLOYMENT_GROUP_NAME: jwt-validator-deployment-group
  IMAGE_NAME: kailima/jwt-validator:latest
  DD_API_KEY: ${{ secrets.DD_API_KEY }}

jobs:
  build_and_deploy:
    name: Build, Push, Register Task and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Registrar nova Task Definition
        working-directory: infra
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Gerar AppSpec.yml dinamicamente
        working-directory: infra
        run: |
          REVISION=$(echo $TASK_DEF_ARN | awk -F: '{print $NF}')
          cat > AppSpec.yml <<EOF
            version: 0.0
            Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                    TaskDefinition: "$TASK_DEF_ARN"
                    LoadBalancerInfo:
                    ContainerName: "jwt-validator"
                    ContainerPort: 8080
                    PlatformVersion: "LATEST"
            EOF

      - name: Deploy via CodeDeploy
        working-directory: infra
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --revision "revisionType=AppSpecContent,appSpecContent={\"content\":\"$(sed 's/\"/\\"/g' appspec.yml)\"}" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --description "Deploy automático via GitHub Actions" \
            --query "deploymentId" --output text)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          echo "Deployment iniciado: $DEPLOYMENT_ID"

      - name: Exibir status
        run: |
          echo "Deployment iniciado com Task Definition: $TASK_DEF_ARN para o serviço: $SERVICE_NAME"
          echo "Acompanhar status do deployment no console AWS ou via CLI:"
          echo "aws deploy get-deployment --deployment-id $DEPLOYMENT_ID"

