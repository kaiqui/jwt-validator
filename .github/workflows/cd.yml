name: CI/CD → ECS (CodeDeploy Canary)

on:
  pull_request:
    branches:
      - master
    types: [closed]

env:
  AWS_REGION: sa-east-1
  SERVICE_NAME: jwt-validator
  APPLICATION_NAME: jwt-validator-codedeploy-app
  DEPLOYMENT_GROUP_NAME: jwt-validator-deployment-group

jobs:
  build_and_deploy:
    name: Register Task and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Replace DATADOG_API in task-definition
        working-directory: infra
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: |
          sed -i "s/DATADOG_API/${DD_API_KEY}/g" task-definition.json

      - name: Registrar nova Task Definition
        working-directory: infra
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy via CodeDeploy
        run: |
          APP_SPEC_CONTENT=$(jq -n \
            --arg task_arn "$TASK_DEF_ARN" \
            '{
              version: 1,
              Resources: [
                {
                  TargetService: {
                    Type: "AWS::ECS::Service",
                    Properties: {
                      TaskDefinition: $task_arn,
                      LoadBalancerInfo: {
                        ContainerName: "jwt-validator",
                        ContainerPort: 8080
                      }
                    }
                  }
                }
              ]
            }')

          REVISION_JSON=$(jq -n \
            --arg content "$APP_SPEC_CONTENT" \
            '{
              revisionType: "AppSpecContent",
              appSpecContent: {
                content: $content
              }
            }')

          REVISION_STRING=$(echo "$REVISION_JSON" | jq -c)

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "$APPLICATION_NAME" \
            --deployment-group-name "$DEPLOYMENT_GROUP_NAME" \
            --revision "$REVISION_STRING" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --description "Deploy automático via GitHub Actions" \
            --query "deploymentId" --output text)

          echo "Deployment iniciado: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV


      - name: Exibir status
        run: |
          echo "Deployment iniciado com Task Definition: $TASK_DEF_ARN para o serviço: $SERVICE_NAME"
          echo "Acompanhar status do deployment no console AWS ou via CLI:"
          echo "aws deploy get-deployment --deployment-id $DEPLOYMENT_ID"

