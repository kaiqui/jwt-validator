name: CI Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build-test:
    name: Build e Testes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache do Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('app/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build do projeto
        working-directory: app
        run: mvn clean compile -B

      - name: Executar testes
        working-directory: app
        run: mvn test -B

  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    needs: build-test

    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: build-test
    defaults:
      run:
        working-directory: app

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Cache Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build and Run Quality Checks
      run: mvn verify

    - name: Upload Checkstyle Report
      uses: actions/upload-artifact@v4
      with:
        name: checkstyle-report
        path: app/target/checkstyle-result.xml

    - name: Upload PMD Report
      uses: actions/upload-artifact@v4
      with:
        name: pmd-report
        path: app/target/pmd.xml

    - name: Upload SpotBugs Report
      uses: actions/upload-artifact@v4
      with:
        name: spotbugs-report
        path: app/target/spotbugs.xml

  docker-build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-test, sast]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Bump version and push tag
      id: get_version
      uses: anothrnick/github-tag-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true

    - name: Push new tag
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "ci: Bump version to ${{ steps.get_version.outputs.new_tag }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          docker.io/${{ secrets.DOCKER_USERNAME }}/jwt-validator:${{ steps.get_version.outputs.tag }}
          docker.io/${{ secrets.DOCKER_USERNAME }}/jwt-validator:latest
        context: app

    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: Release ${{ steps.get_version.outputs.tag }}
        body: |
          Changes in this Release:
          - MVP
        draft: false
        prerelease: false
